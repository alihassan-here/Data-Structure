1: Create a Node using Class.
2: ---PUSH PSEUDOCODE---
    : This function should accept a value.
    : create a new node using the value passed to the function.
    : if there is no head property on the list, set the head and tail to be the newly created node.
    : otherwise set the next property on the tail to be the new node and set the tail property on the list to be the newly created node.
    : increment the length by one.
    : return 
3: ---POP PSEUDOCODE---
    : if there are no nodes in the list, return undefined.
    : Loop through the list until you reach the tail.
    : Set the next property of the 2nd to last node to be null.
    : Set the tail to be the 2nd to last node.
    : Decrement the length of the list by 1.
    : return the value of the node removed.
4: ----SHIFTING PSEUDOCODE---
    : If there are no nodes, return undefined.
    : Store the current head property in a variable.
    : Set the head property to be the current head's next property.
    : Decrement the length by 1.
    : Return the value of node removed;
5: ----UNSHIFT PSEUDOCODE----
    : This function should accept a value.
    : Create a new node using the value passed to the function.
    : If there is no head property on the list, set the head and tail to be the newly created node.
    : Otherwise set the new created node's next property to be the current head property on the list.
    : Set the head property on the list to be that new created node.
    : Increment the length of the list by 1.
    : Return the linked list.
6: ---GET PSEUDOCODE---
    : This function should accept an index.
    : If the index is less than zero or greater than or equal to the length of the list, return null;
    : Loop through the list until you search the index and return the node at that specific index.
7: ---SET PSEUDOCODE---
    : This function should accept a value and an index.
    : Use your get function to find the specific node.
    : If the node is not found, return false.
    : If the node is found, set the value of that node  to be the value passed to the function and return true.
8: ---INSERT PSEUDOCODE---
    : If the index is less than zero or greater than the length, return false.
    : If the index is the same as the length, push a new to the end of the list.
    : If the index is 0, unshift a new node to the start of the list.
    : Otherwise, using the get method, access the node at the index-1.
    : Set the next property on that node to be the new node.
    : Set the next property on the new node to be the previous next.
    : Increment the length.
    : Return true.
9: ---REMOVE previous---
    : If the index is less than zero or greater than the length, return undefined.
    : If the index is the same as the length-1, pop.
    : If the index is 0, shift.
    : Otherwise using the get method, access the node at the index-1.
    : Set the next property on that node to be the next of the next node.
    : Decrement the length.
    : return the value of the node removed.
10: ---REVERSE PSEUDOCODE---
    : Swap the head and tail.
    : Create a variable called next.
    : Create a variable called prev.
    : Create a variable called node and initialize it to the head property.
    : Loop through the list.
    : Set next to be the next property on whatever node is.
    : Set the next property on the node to be whatever prev is.
    : Set prev to be the value of the node variable.
    : Set the node variable to be the value of the next variable.