1: Create new Node

2: ---PUSH PSEUDOCODE---
    : Create a new node with the value passed to the function.
    : If the head property is null set the head and tail to be the newly created node.
    : If not, set the next property on the tail to be that node.
    : Set the previous property on the newly created node to be the tail.
    : Set the tail to be the newly created node.
    : Increment the length.
    : Return the Doubly Linked List.

3: ---POP PSEUDOCODE---
    : If there is no head, Return undefined.
    : Store the current tail in a variable to Return later.
    : If the length is 1, set the head and tail to be null.
    : Update the tail to be the previous node.
    : Set the newTail's next to null.
    : Decrement the length.
    : Return the value removed.

4: ---SHIFT PSEUDOCODE---
    : If the length is 0, Return undefined.
    : Store the current head property in a variable(we'll call it old head).
    : If the length is one
        => set the head to be null.
        => set the tail to be null.
    : Update the head to be the next of the old head.
    : Set the head's prev property to null.
    : Set the old head's nex to null.
    : Decrement the length.
    : Return old head.

5:  ---UNSHIFTING PSEUDOCODE---
    : Create a new node with the value passed to the function.
    : If the length is 0
        => Set the head to be the new node.
        => Set the tail to be the new node.
    : Otherwise
        => Set the prev property on the head of the list to be the new node.
        => Set the next property on the new node to be the head property.
        => Update the head to be the new new.
    : Increment the length.
    : Return the list.

6: ---GET PSEUDOCODE---
    : If the index is less than 0 or greater or equal to the length, Return null.
    : If the index is less than or equal to half of the length of the list
        => Loop through the list starting from the head and loop towards the middle.
        => Return the node once it is found.
    : If the index is greater than or half of the length of the list.
        => Loop through the list starting from the tail and loop towards the middle.
        => Return the node once it is found.

7: ---SET PSEUDOCODE---
    : Create a variable which is the result of the get method at the index passed to the function
        => if the get method returns a valid node, set the value of that node to be the value passed to the function.
        => Return true.
    : Otherwise, Return false.

8: ---INSERT PSEUDOCODE---
    : if the index is less than or greater than or equal to the length : Return false;
    : If the index is 0, use unshift method;
    : if the index is same as the length, use PUSH method;
    : Use the get method to access the index-1;
    : Set the next and prev properties on the correct nodes to link everything together.
    : Increment the length.
    : Return true.
9:  ---REMOVE PSEUDOCODE---
    : if the index is less than or greater than or equal to the length : Return undefined;
    : if the index is 0, use SHIFT method.
    : if the index is the same as the length-1, use POP method.
    : Use the GET method to retrieve the item to be removed.
    : Update the next and prev properties to remove the found node form the list.
    : Set next and prev to null on the found node.
    : Decrement the length.
    : Return removed node.